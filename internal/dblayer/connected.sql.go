// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: connected.sql

package dblayer

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCommentsByPage = `-- name: GetCommentsByPage :many
SELECT Comments.CommentId, Comments.UserId, Users.UserName, Comments.CreatedAt,  Comments.CommentData 
FROM Comments
JOIN Users ON Comments.UserId = Users.UserId
WHERE Comments.PageId = $1 
AND Comments.ParentId = 0
ORDER BY Comments.CreatedAt ASC
LIMIT $2
`

type GetCommentsByPageParams struct {
	Pageid int32
	Limit  int32
}

type GetCommentsByPageRow struct {
	Commentid   int32
	Userid      int32
	Username    string
	Createdat   pgtype.Timestamp
	Commentdata string
}

func (q *Queries) GetCommentsByPage(ctx context.Context, arg GetCommentsByPageParams) ([]GetCommentsByPageRow, error) {
	rows, err := q.db.Query(ctx, getCommentsByPage, arg.Pageid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByPageRow
	for rows.Next() {
		var i GetCommentsByPageRow
		if err := rows.Scan(
			&i.Commentid,
			&i.Userid,
			&i.Username,
			&i.Createdat,
			&i.Commentdata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserIDByCommentID = `-- name: GetUserIDByCommentID :one
SELECT UserId FROM Comments WHERE CommentId = $1
`

func (q *Queries) GetUserIDByCommentID(ctx context.Context, commentid int32) (int32, error) {
	row := q.db.QueryRow(ctx, getUserIDByCommentID, commentid)
	var userid int32
	err := row.Scan(&userid)
	return userid, err
}
